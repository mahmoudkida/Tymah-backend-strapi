type Ad {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  picture: UploadFile
}

input AdInput {
  Title: String
  picture: ID
}

type Character {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  CharecterName: String
  Avatar: UploadFile
}

input CharacterInput {
  CharecterName: String
  Avatar: ID
}

input createAdInput {
  data: AdInput
}

type createAdPayload {
  ad: Ad
}

input createCharacterInput {
  data: CharacterInput
}

type createCharacterPayload {
  character: Character
}

input createFoodInput {
  data: FoodInput
}

type createFoodPayload {
  food: Food
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVideocategoriesInput {
  data: VideocategoriesInput
}

type createVideocategoriesPayload {
  videocategory: Videocategories
}

input createVideosInput {
  data: VideosInput
}

type createVideosPayload {
  video: Videos
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteAdInput {
  where: InputID
}

type deleteAdPayload {
  ad: Ad
}

input deleteCharacterInput {
  where: InputID
}

type deleteCharacterPayload {
  character: Character
}

input deleteFoodInput {
  where: InputID
}

type deleteFoodPayload {
  food: Food
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVideocategoriesInput {
  where: InputID
}

type deleteVideocategoriesPayload {
  videocategory: Videocategories
}

input deleteVideosInput {
  where: InputID
}

type deleteVideosPayload {
  video: Videos
}

input editAdInput {
  Title: String
  picture: ID
}

input editCharacterInput {
  CharecterName: String
  Avatar: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editFoodInput {
  Name: String
  Description: String
  Type: ENUM_FOOD_TYPE
  Image: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input editVideocategoriesInput {
  name: String
  background: ID
  videos: [ID]
}

input editVideosInput {
  url: String
  Title: String
  thumbnail: ID
  videocategory: ID
}

enum ENUM_FOOD_TYPE {
  Healthy
  Unhealthy
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Food {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String
  Description: String
  Type: ENUM_FOOD_TYPE
  Image: UploadFile
}

input FoodInput {
  Name: String
  Description: String
  Type: ENUM_FOOD_TYPE
  Image: ID
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Ad | createAdPayload | updateAdPayload | deleteAdPayload | Character | createCharacterPayload | updateCharacterPayload | deleteCharacterPayload | Food | createFoodPayload | updateFoodPayload | deleteFoodPayload | Videocategories | createVideocategoriesPayload | updateVideocategoriesPayload | deleteVideocategoriesPayload | Videos | createVideosPayload | updateVideosPayload | deleteVideosPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createAd(input: createAdInput): createAdPayload
  updateAd(input: updateAdInput): updateAdPayload
  deleteAd(input: deleteAdInput): deleteAdPayload
  createCharacter(input: createCharacterInput): createCharacterPayload
  updateCharacter(input: updateCharacterInput): updateCharacterPayload
  deleteCharacter(input: deleteCharacterInput): deleteCharacterPayload
  createFood(input: createFoodInput): createFoodPayload
  updateFood(input: updateFoodInput): updateFoodPayload
  deleteFood(input: deleteFoodInput): deleteFoodPayload
  createVideocategories(input: createVideocategoriesInput): createVideocategoriesPayload
  updateVideocategories(input: updateVideocategoriesInput): updateVideocategoriesPayload
  deleteVideocategories(input: deleteVideocategoriesInput): deleteVideocategoriesPayload
  createVideos(input: createVideosInput): createVideosPayload
  updateVideos(input: updateVideosInput): updateVideosPayload
  deleteVideos(input: deleteVideosInput): deleteVideosPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  ad(id: ID!): Ad
  ads(sort: String, limit: Int, start: Int, where: JSON): [Ad]
  character(id: ID!): Character
  characters(sort: String, limit: Int, start: Int, where: JSON): [Character]
  food(id: ID!): Food
  foods(sort: String, limit: Int, start: Int, where: JSON): [Food]
  videocategory(id: ID!): Videocategories
  videocategories(sort: String, limit: Int, start: Int, where: JSON): [Videocategories]
  video(id: ID!): Videos
  videos(sort: String, limit: Int, start: Int, where: JSON): [Videos]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateAdInput {
  where: InputID
  data: editAdInput
}

type updateAdPayload {
  ad: Ad
}

input updateCharacterInput {
  where: InputID
  data: editCharacterInput
}

type updateCharacterPayload {
  character: Character
}

input updateFoodInput {
  where: InputID
  data: editFoodInput
}

type updateFoodPayload {
  food: Food
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVideocategoriesInput {
  where: InputID
  data: editVideocategoriesInput
}

type updateVideocategoriesPayload {
  videocategory: Videocategories
}

input updateVideosInput {
  where: InputID
  data: editVideosInput
}

type updateVideosPayload {
  video: Videos
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type Videocategories {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  background: UploadFile
  videos(sort: String, limit: Int, start: Int, where: JSON): [Videos]
}

input VideocategoriesInput {
  name: String
  background: ID
  videos: [ID]
}

type Videos {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  url: String
  Title: String
  thumbnail: UploadFile
  videocategory: Videocategories
}

input VideosInput {
  url: String
  Title: String
  thumbnail: ID
  videocategory: ID
}
